<div class="rr-field">
  <div class="rr-text-field">
    <input
      id={{id}}-user
      placeholder=" "
      {{#if type}}
      type="{{type}}"
      {{else}}
      type="text"
      {{/if}}
      {{#if value}}
      value=""
      {{/if}}
      {{#if autocomplete}}
      autocomplete="{{autocomplete}}"
      {{/if}}
    />
    <label id={{id}}-label>{{t label}}</label>
    <input
      id={{id}}
      type="hidden"
      value="{{value}}"
    >
    {{#if countryFieldId}}
      <input
        id={{countryFieldId}}
        type="hidden"
        value=""
      >
    {{/if}}
    <fieldset id={{id}}-fieldset>
      <legend>
        <span>{{t label}}</span>
      </legend>
    </fieldset>
  </div>
  <span class="rr-field-error rr-hidden {{id}}-error"></span>
</div>

<script>
    RetailRedStorefront.onLoad(function(controller) {
      var apiInput = document.querySelector('#{{id}}');
      var userInput = document.querySelector('#{{id}}-user');
      var userInputLabel = document.querySelector('#{{id}}-label')
      var userInputFieldset = document.querySelector('#{{id}}-fieldset')
      var countryInput = document.querySelector('#{{countryFieldId}}')

      {{!-- Initialize the telephone input module --}}
      var iti = controller.initIntlTelInput(userInput);

      iti.promise.then(() => {
        {{!-- Move the label into the container which is generated by the module --}}
        userInput.after(userInputLabel);
        userInputLabel.after(userInputFieldset);

        {{!-- Update the module with the persisted value from localStorage --}}
        iti.setNumber(apiInput.value);

        {{!-- Update fields on change --}}
        function handleChange() {
          apiInput.setAttribute('value', iti.isValidNumber() ? iti.getNumber() : '');
        }

        {{!-- Simulate blur event to trigger controller logic --}}
        function handleBlur(_, input) {
          const e = document.createEvent('HTMLEvents');
          e.initEvent('blur', false, true);
          (input || apiInput ).dispatchEvent(e);
        }

        {{!-- Sync the country id to the country input --}}
        function updateCountryInput() {
          const { iso2 } = iti.getSelectedCountryData();
          if (countryInput && iso2) {
            countryInput.setAttribute('value', iso2.toUpperCase());
          }
        }

        updateCountryInput();

        {{!-- Initialize the various event listeners --}}
        userInput.addEventListener('change', handleChange);
        userInput.addEventListener('keyup', handleChange);
        userInput.addEventListener('blur', handleBlur);

        userInput.addEventListener('countrychange', function() {
          updateCountryInput();
          handleChange();
          handleBlur(null, apiInput);
          handleBlur(null, countryInput);
        })
      });
    });
</script>
